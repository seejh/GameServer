  
  #pragma once
  #include "Types.h"
  #include <windows.h>
  #include "DBBind.h"
  
  namespace SP
  {
  	
      class InsertAccount : public DBBind<2,0>
      {
      public:
      	InsertAccount(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertAccount(?,?)}") { }
      	void In_AccountPw(int32& v) { BindParam(0, v); };
      	void In_AccountPw(int32&& v) { _accountPw = std::move(v); BindParam(0, _accountPw); };
      	template<int32 N> void In_AccountName(WCHAR(&v)[N]) { BindParam(1, v); };
      	template<int32 N> void In_AccountName(const WCHAR(&v)[N]) { BindParam(1, v); };
      	void In_AccountName(WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_AccountName(const WCHAR* v, int32 count) { BindParam(1, v, count); };
  
      private:
      	int32 _accountPw = {};
      };
  
      class SelectAccountDbId : public DBBind<1,1>
      {
      public:
      	SelectAccountDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectAccountDbId(?)}") { }
      	template<int32 N> void In_AccountName(WCHAR(&v)[N]) { BindParam(0, v); };
      	template<int32 N> void In_AccountName(const WCHAR(&v)[N]) { BindParam(0, v); };
      	void In_AccountName(WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_AccountName(const WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void Out_AccountDbId(OUT int32& v) { BindCol(0, v); };
  
      private:
      };
  
      class SelectAccountByAccountDbId : public DBBind<1,3>
      {
      public:
      	SelectAccountByAccountDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectAccountByAccountDbId(?)}") { }
      	void In_AccountDbId(int32& v) { BindParam(0, v); };
      	void In_AccountDbId(int32&& v) { _accountDbId = std::move(v); BindParam(0, _accountDbId); };
      	void Out_AccountDbId(OUT int32& v) { BindCol(0, v); };
      	void Out_AccountPw(OUT int32& v) { BindCol(1, v); };
      	template<int32 N> void Out_AccountName(OUT WCHAR(&v)[N]) { BindCol(2, v); };
  
      private:
      	int32 _accountDbId = {};
      };
  
      class SelectAccountByAccountName : public DBBind<1,3>
      {
      public:
      	SelectAccountByAccountName(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectAccountByAccountName(?)}") { }
      	template<int32 N> void In_AccountName(WCHAR(&v)[N]) { BindParam(0, v); };
      	template<int32 N> void In_AccountName(const WCHAR(&v)[N]) { BindParam(0, v); };
      	void In_AccountName(WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_AccountName(const WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void Out_AccountDbId(OUT int32& v) { BindCol(0, v); };
      	void Out_AccountPw(OUT int32& v) { BindCol(1, v); };
      	template<int32 N> void Out_AccountName(OUT WCHAR(&v)[N]) { BindCol(2, v); };
  
      private:
      };
  
      class InsertPlayer : public DBBind<10,0>
      {
      public:
      	InsertPlayer(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertPlayer(?,?,?,?,?,?,?,?,?,?)}") { }
      	template<int32 N> void In_PlayerName(WCHAR(&v)[N]) { BindParam(0, v); };
      	template<int32 N> void In_PlayerName(const WCHAR(&v)[N]) { BindParam(0, v); };
      	void In_PlayerName(WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_PlayerName(const WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_Level(int32& v) { BindParam(1, v); };
      	void In_Level(int32&& v) { _level = std::move(v); BindParam(1, _level); };
      	void In_TotalExp(int32& v) { BindParam(2, v); };
      	void In_TotalExp(int32&& v) { _totalExp = std::move(v); BindParam(2, _totalExp); };
      	void In_MaxHp(int32& v) { BindParam(3, v); };
      	void In_MaxHp(int32&& v) { _maxHp = std::move(v); BindParam(3, _maxHp); };
      	void In_Hp(int32& v) { BindParam(4, v); };
      	void In_Hp(int32&& v) { _hp = std::move(v); BindParam(4, _hp); };
      	void In_Damage(int32& v) { BindParam(5, v); };
      	void In_Damage(int32&& v) { _damage = std::move(v); BindParam(5, _damage); };
      	void In_LocationX(float& v) { BindParam(6, v); };
      	void In_LocationX(float&& v) { _locationX = std::move(v); BindParam(6, _locationX); };
      	void In_LocationY(float& v) { BindParam(7, v); };
      	void In_LocationY(float&& v) { _locationY = std::move(v); BindParam(7, _locationY); };
      	void In_LocationZ(float& v) { BindParam(8, v); };
      	void In_LocationZ(float&& v) { _locationZ = std::move(v); BindParam(8, _locationZ); };
      	void In_AccountDbId(int32& v) { BindParam(9, v); };
      	void In_AccountDbId(int32&& v) { _accountDbId = std::move(v); BindParam(9, _accountDbId); };
  
      private:
      	int32 _level = {};
      	int32 _totalExp = {};
      	int32 _maxHp = {};
      	int32 _hp = {};
      	int32 _damage = {};
      	float _locationX = {};
      	float _locationY = {};
      	float _locationZ = {};
      	int32 _accountDbId = {};
      };
  
      class InsertPlayerSelectIdentity : public DBBind<10,1>
      {
      public:
      	InsertPlayerSelectIdentity(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertPlayerSelectIdentity(?,?,?,?,?,?,?,?,?,?)}") { }
      	template<int32 N> void In_PlayerName(WCHAR(&v)[N]) { BindParam(0, v); };
      	template<int32 N> void In_PlayerName(const WCHAR(&v)[N]) { BindParam(0, v); };
      	void In_PlayerName(WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_PlayerName(const WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_Level(int32& v) { BindParam(1, v); };
      	void In_Level(int32&& v) { _level = std::move(v); BindParam(1, _level); };
      	void In_TotalExp(int32& v) { BindParam(2, v); };
      	void In_TotalExp(int32&& v) { _totalExp = std::move(v); BindParam(2, _totalExp); };
      	void In_MaxHp(int32& v) { BindParam(3, v); };
      	void In_MaxHp(int32&& v) { _maxHp = std::move(v); BindParam(3, _maxHp); };
      	void In_Hp(int32& v) { BindParam(4, v); };
      	void In_Hp(int32&& v) { _hp = std::move(v); BindParam(4, _hp); };
      	void In_Damage(int32& v) { BindParam(5, v); };
      	void In_Damage(int32&& v) { _damage = std::move(v); BindParam(5, _damage); };
      	void In_LocationX(float& v) { BindParam(6, v); };
      	void In_LocationX(float&& v) { _locationX = std::move(v); BindParam(6, _locationX); };
      	void In_LocationY(float& v) { BindParam(7, v); };
      	void In_LocationY(float&& v) { _locationY = std::move(v); BindParam(7, _locationY); };
      	void In_LocationZ(float& v) { BindParam(8, v); };
      	void In_LocationZ(float&& v) { _locationZ = std::move(v); BindParam(8, _locationZ); };
      	void In_AccountDbId(int32& v) { BindParam(9, v); };
      	void In_AccountDbId(int32&& v) { _accountDbId = std::move(v); BindParam(9, _accountDbId); };
      	void Out_Identity(OUT int64& v) { BindCol(0, v); };
  
      private:
      	int32 _level = {};
      	int32 _totalExp = {};
      	int32 _maxHp = {};
      	int32 _hp = {};
      	int32 _damage = {};
      	float _locationX = {};
      	float _locationY = {};
      	float _locationZ = {};
      	int32 _accountDbId = {};
      };
  
      class UpdatePlayer : public DBBind<9,0>
      {
      public:
      	UpdatePlayer(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spUpdatePlayer(?,?,?,?,?,?,?,?,?)}") { }
      	void In_PlayerDbId(int32& v) { BindParam(0, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(0, _playerDbId); };
      	void In_Level(int32& v) { BindParam(1, v); };
      	void In_Level(int32&& v) { _level = std::move(v); BindParam(1, _level); };
      	void In_TotalExp(int32& v) { BindParam(2, v); };
      	void In_TotalExp(int32&& v) { _totalExp = std::move(v); BindParam(2, _totalExp); };
      	void In_MaxHp(int32& v) { BindParam(3, v); };
      	void In_MaxHp(int32&& v) { _maxHp = std::move(v); BindParam(3, _maxHp); };
      	void In_Hp(int32& v) { BindParam(4, v); };
      	void In_Hp(int32&& v) { _hp = std::move(v); BindParam(4, _hp); };
      	void In_Damage(int32& v) { BindParam(5, v); };
      	void In_Damage(int32&& v) { _damage = std::move(v); BindParam(5, _damage); };
      	void In_LocationX(float& v) { BindParam(6, v); };
      	void In_LocationX(float&& v) { _locationX = std::move(v); BindParam(6, _locationX); };
      	void In_LocationY(float& v) { BindParam(7, v); };
      	void In_LocationY(float&& v) { _locationY = std::move(v); BindParam(7, _locationY); };
      	void In_LocationZ(float& v) { BindParam(8, v); };
      	void In_LocationZ(float&& v) { _locationZ = std::move(v); BindParam(8, _locationZ); };
  
      private:
      	int32 _playerDbId = {};
      	int32 _level = {};
      	int32 _totalExp = {};
      	int32 _maxHp = {};
      	int32 _hp = {};
      	int32 _damage = {};
      	float _locationX = {};
      	float _locationY = {};
      	float _locationZ = {};
      };
  
      class SelectPlayerName : public DBBind<1,1>
      {
      public:
      	SelectPlayerName(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectPlayerName(?)}") { }
      	template<int32 N> void In_PlayerName(WCHAR(&v)[N]) { BindParam(0, v); };
      	template<int32 N> void In_PlayerName(const WCHAR(&v)[N]) { BindParam(0, v); };
      	void In_PlayerName(WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_PlayerName(const WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void Out_PlayerDbId(OUT int32& v) { BindCol(0, v); };
  
      private:
      };
  
      class SelectPlayerByPlayerDbId : public DBBind<1,11>
      {
      public:
      	SelectPlayerByPlayerDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectPlayerByPlayerDbId(?)}") { }
      	void In_PlayerDbId(int32& v) { BindParam(0, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(0, _playerDbId); };
      	void Out_PlayerDbId(OUT int32& v) { BindCol(0, v); };
      	template<int32 N> void Out_PlayerName(OUT WCHAR(&v)[N]) { BindCol(1, v); };
      	void Out_Level(OUT int32& v) { BindCol(2, v); };
      	void Out_TotalExp(OUT int32& v) { BindCol(3, v); };
      	void Out_MaxHp(OUT int32& v) { BindCol(4, v); };
      	void Out_Hp(OUT int32& v) { BindCol(5, v); };
      	void Out_Damage(OUT int32& v) { BindCol(6, v); };
      	void Out_LocationX(OUT float& v) { BindCol(7, v); };
      	void Out_LocationY(OUT float& v) { BindCol(8, v); };
      	void Out_LocationZ(OUT float& v) { BindCol(9, v); };
      	void Out_AccountDbId(OUT int32& v) { BindCol(10, v); };
  
      private:
      	int32 _playerDbId = {};
      };
  
      class SelectPlayerByAccountDbId : public DBBind<1,11>
      {
      public:
      	SelectPlayerByAccountDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectPlayerByAccountDbId(?)}") { }
      	void In_AccountDbId(int32& v) { BindParam(0, v); };
      	void In_AccountDbId(int32&& v) { _accountDbId = std::move(v); BindParam(0, _accountDbId); };
      	void Out_PlayerDbId(OUT int32& v) { BindCol(0, v); };
      	template<int32 N> void Out_PlayerName(OUT WCHAR(&v)[N]) { BindCol(1, v); };
      	void Out_Level(OUT int32& v) { BindCol(2, v); };
      	void Out_TotalExp(OUT int32& v) { BindCol(3, v); };
      	void Out_MaxHp(OUT int32& v) { BindCol(4, v); };
      	void Out_Hp(OUT int32& v) { BindCol(5, v); };
      	void Out_Damage(OUT int32& v) { BindCol(6, v); };
      	void Out_LocationX(OUT float& v) { BindCol(7, v); };
      	void Out_LocationY(OUT float& v) { BindCol(8, v); };
      	void Out_LocationZ(OUT float& v) { BindCol(9, v); };
      	void Out_AccountDbId(OUT int32& v) { BindCol(10, v); };
  
      private:
      	int32 _accountDbId = {};
      };
  
      class SelectTest : public DBBind<0,1>
      {
      public:
      	SelectTest(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectTest}") { }
      	void Out_Identity(OUT int64& v) { BindCol(0, v); };
  
      private:
      };
  
      class InsertItem : public DBBind<5,0>
      {
      public:
      	InsertItem(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertItem(?,?,?,?,?)}") { }
      	void In_TemplateId(int32& v) { BindParam(0, v); };
      	void In_TemplateId(int32&& v) { _templateId = std::move(v); BindParam(0, _templateId); };
      	void In_Count(int32& v) { BindParam(1, v); };
      	void In_Count(int32&& v) { _count = std::move(v); BindParam(1, _count); };
      	void In_Slot(int32& v) { BindParam(2, v); };
      	void In_Slot(int32&& v) { _slot = std::move(v); BindParam(2, _slot); };
      	void In_Equipped(bool& v) { BindParam(3, v); };
      	void In_Equipped(bool&& v) { _equipped = std::move(v); BindParam(3, _equipped); };
      	void In_PlayerDbId(int32& v) { BindParam(4, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(4, _playerDbId); };
  
      private:
      	int32 _templateId = {};
      	int32 _count = {};
      	int32 _slot = {};
      	bool _equipped = {};
      	int32 _playerDbId = {};
      };
  
      class InsertItemAndSelectIdentity : public DBBind<5,1>
      {
      public:
      	InsertItemAndSelectIdentity(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertItemAndSelectIdentity(?,?,?,?,?)}") { }
      	void In_TemplateId(int32& v) { BindParam(0, v); };
      	void In_TemplateId(int32&& v) { _templateId = std::move(v); BindParam(0, _templateId); };
      	void In_Count(int32& v) { BindParam(1, v); };
      	void In_Count(int32&& v) { _count = std::move(v); BindParam(1, _count); };
      	void In_Slot(int32& v) { BindParam(2, v); };
      	void In_Slot(int32&& v) { _slot = std::move(v); BindParam(2, _slot); };
      	void In_Equipped(bool& v) { BindParam(3, v); };
      	void In_Equipped(bool&& v) { _equipped = std::move(v); BindParam(3, _equipped); };
      	void In_PlayerDbId(int32& v) { BindParam(4, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(4, _playerDbId); };
      	void Out_Identity(OUT int64& v) { BindCol(0, v); };
  
      private:
      	int32 _templateId = {};
      	int32 _count = {};
      	int32 _slot = {};
      	bool _equipped = {};
      	int32 _playerDbId = {};
      };
  
      class UpdateItem : public DBBind<6,0>
      {
      public:
      	UpdateItem(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spUpdateItem(?,?,?,?,?,?)}") { }
      	void In_ItemDbId(int32& v) { BindParam(0, v); };
      	void In_ItemDbId(int32&& v) { _itemDbId = std::move(v); BindParam(0, _itemDbId); };
      	void In_TemplateId(int32& v) { BindParam(1, v); };
      	void In_TemplateId(int32&& v) { _templateId = std::move(v); BindParam(1, _templateId); };
      	void In_Count(int32& v) { BindParam(2, v); };
      	void In_Count(int32&& v) { _count = std::move(v); BindParam(2, _count); };
      	void In_Slot(int32& v) { BindParam(3, v); };
      	void In_Slot(int32&& v) { _slot = std::move(v); BindParam(3, _slot); };
      	void In_Equipped(bool& v) { BindParam(4, v); };
      	void In_Equipped(bool&& v) { _equipped = std::move(v); BindParam(4, _equipped); };
      	void In_PlayerDbId(int32& v) { BindParam(5, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(5, _playerDbId); };
  
      private:
      	int32 _itemDbId = {};
      	int32 _templateId = {};
      	int32 _count = {};
      	int32 _slot = {};
      	bool _equipped = {};
      	int32 _playerDbId = {};
      };
  
      class DeleteItem : public DBBind<1,0>
      {
      public:
      	DeleteItem(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spDeleteItem(?)}") { }
      	void In_ItemDbId(int32& v) { BindParam(0, v); };
      	void In_ItemDbId(int32&& v) { _itemDbId = std::move(v); BindParam(0, _itemDbId); };
  
      private:
      	int32 _itemDbId = {};
      };
  
      class SelectIdentity : public DBBind<0,1>
      {
      public:
      	SelectIdentity(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectIdentity}") { }
      	void Out_Identity(OUT int64& v) { BindCol(0, v); };
  
      private:
      };
  
      class SelectItemByItemDbId : public DBBind<1,6>
      {
      public:
      	SelectItemByItemDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectItemByItemDbId(?)}") { }
      	void In_ItemDbId(int32& v) { BindParam(0, v); };
      	void In_ItemDbId(int32&& v) { _itemDbId = std::move(v); BindParam(0, _itemDbId); };
      	void Out_ItemDbId(OUT int32& v) { BindCol(0, v); };
      	void Out_TemplateId(OUT int32& v) { BindCol(1, v); };
      	void Out_Count(OUT int32& v) { BindCol(2, v); };
      	void Out_Slot(OUT int32& v) { BindCol(3, v); };
      	void Out_Equipped(OUT bool& v) { BindCol(4, v); };
      	void Out_PlayerDbId(OUT int32& v) { BindCol(5, v); };
  
      private:
      	int32 _itemDbId = {};
      };
  
      class SelectItemByPlayerDbId : public DBBind<1,6>
      {
      public:
      	SelectItemByPlayerDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectItemByPlayerDbId(?)}") { }
      	void In_PlayerDbId(int32& v) { BindParam(0, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(0, _playerDbId); };
      	void Out_ItemDbId(OUT int32& v) { BindCol(0, v); };
      	void Out_TemplateId(OUT int32& v) { BindCol(1, v); };
      	void Out_Count(OUT int32& v) { BindCol(2, v); };
      	void Out_Slot(OUT int32& v) { BindCol(3, v); };
      	void Out_Equipped(OUT bool& v) { BindCol(4, v); };
      	void Out_PlayerDbId(OUT int32& v) { BindCol(5, v); };
  
      private:
      	int32 _playerDbId = {};
      };
  
      class SelectQuestByPlayerDbId : public DBBind<1,5>
      {
      public:
      	SelectQuestByPlayerDbId(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectQuestByPlayerDbId(?)}") { }
      	void In_PlayerDbId(int32& v) { BindParam(0, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(0, _playerDbId); };
      	void Out_QuestDbId(OUT int32& v) { BindCol(0, v); };
      	void Out_TemplateId(OUT int32& v) { BindCol(1, v); };
      	void Out_PlayerDbId(OUT int32& v) { BindCol(2, v); };
      	void Out_Progress(OUT int32& v) { BindCol(3, v); };
      	void Out_Completed(OUT bool& v) { BindCol(4, v); };
  
      private:
      	int32 _playerDbId = {};
      };
  
      class InsertQuest : public DBBind<4,0>
      {
      public:
      	InsertQuest(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertQuest(?,?,?,?)}") { }
      	void In_TemplateId(int32& v) { BindParam(0, v); };
      	void In_TemplateId(int32&& v) { _templateId = std::move(v); BindParam(0, _templateId); };
      	void In_PlayerDbId(int32& v) { BindParam(1, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(1, _playerDbId); };
      	void In_Progress(int32& v) { BindParam(2, v); };
      	void In_Progress(int32&& v) { _progress = std::move(v); BindParam(2, _progress); };
      	void In_Completed(bool& v) { BindParam(3, v); };
      	void In_Completed(bool&& v) { _completed = std::move(v); BindParam(3, _completed); };
  
      private:
      	int32 _templateId = {};
      	int32 _playerDbId = {};
      	int32 _progress = {};
      	bool _completed = {};
      };
  
      class InsertQuestAndSelectIdentity : public DBBind<4,1>
      {
      public:
      	InsertQuestAndSelectIdentity(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertQuestAndSelectIdentity(?,?,?,?)}") { }
      	void In_TemplateId(int32& v) { BindParam(0, v); };
      	void In_TemplateId(int32&& v) { _templateId = std::move(v); BindParam(0, _templateId); };
      	void In_PlayerDbId(int32& v) { BindParam(1, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(1, _playerDbId); };
      	void In_Progress(int32& v) { BindParam(2, v); };
      	void In_Progress(int32&& v) { _progress = std::move(v); BindParam(2, _progress); };
      	void In_Completed(bool& v) { BindParam(3, v); };
      	void In_Completed(bool&& v) { _completed = std::move(v); BindParam(3, _completed); };
      	void Out_Identity(OUT int64& v) { BindCol(0, v); };
  
      private:
      	int32 _templateId = {};
      	int32 _playerDbId = {};
      	int32 _progress = {};
      	bool _completed = {};
      };
  
      class UpdateQuest : public DBBind<5,0>
      {
      public:
      	UpdateQuest(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spUpdateQuest(?,?,?,?,?)}") { }
      	void In_QuestDbId(int32& v) { BindParam(0, v); };
      	void In_QuestDbId(int32&& v) { _questDbId = std::move(v); BindParam(0, _questDbId); };
      	void In_TemplateId(int32& v) { BindParam(1, v); };
      	void In_TemplateId(int32&& v) { _templateId = std::move(v); BindParam(1, _templateId); };
      	void In_PlayerDbId(int32& v) { BindParam(2, v); };
      	void In_PlayerDbId(int32&& v) { _playerDbId = std::move(v); BindParam(2, _playerDbId); };
      	void In_Progress(int32& v) { BindParam(3, v); };
      	void In_Progress(int32&& v) { _progress = std::move(v); BindParam(3, _progress); };
      	void In_Completed(bool& v) { BindParam(4, v); };
      	void In_Completed(bool&& v) { _completed = std::move(v); BindParam(4, _completed); };
  
      private:
      	int32 _questDbId = {};
      	int32 _templateId = {};
      	int32 _playerDbId = {};
      	int32 _progress = {};
      	bool _completed = {};
      };
  
      class DeleteQuest : public DBBind<1,0>
      {
      public:
      	DeleteQuest(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spDeleteQuest(?)}") { }
      	void In_QuestDbId(int32& v) { BindParam(0, v); };
      	void In_QuestDbId(int32&& v) { _questDbId = std::move(v); BindParam(0, _questDbId); };
  
      private:
      	int32 _questDbId = {};
      };
  
      class UpdateServerInfos : public DBBind<5,0>
      {
      public:
      	UpdateServerInfos(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spUpdateServerInfos(?,?,?,?,?)}") { }
      	void In_ServerDbId(int32& v) { BindParam(0, v); };
      	void In_ServerDbId(int32&& v) { _serverDbId = std::move(v); BindParam(0, _serverDbId); };
      	template<int32 N> void In_Name(WCHAR(&v)[N]) { BindParam(1, v); };
      	template<int32 N> void In_Name(const WCHAR(&v)[N]) { BindParam(1, v); };
      	void In_Name(WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_Name(const WCHAR* v, int32 count) { BindParam(1, v, count); };
      	template<int32 N> void In_IpAddress(WCHAR(&v)[N]) { BindParam(2, v); };
      	template<int32 N> void In_IpAddress(const WCHAR(&v)[N]) { BindParam(2, v); };
      	void In_IpAddress(WCHAR* v, int32 count) { BindParam(2, v, count); };
      	void In_IpAddress(const WCHAR* v, int32 count) { BindParam(2, v, count); };
      	void In_Port(int32& v) { BindParam(3, v); };
      	void In_Port(int32&& v) { _port = std::move(v); BindParam(3, _port); };
      	void In_BusyScore(int32& v) { BindParam(4, v); };
      	void In_BusyScore(int32&& v) { _busyScore = std::move(v); BindParam(4, _busyScore); };
  
      private:
      	int32 _serverDbId = {};
      	int32 _port = {};
      	int32 _busyScore = {};
      };
  
  
       
  };
  
  #pragma once
  #include "Types.h"
  #include <windows.h>
  #include "DBBind.h"
  
  namespace SP
  {
  	
      class InsertServerInfo : public DBBind<4,0>
      {
      public:
      	InsertServerInfo(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertServerInfo(?,?,?,?)}") { }
      	template<int32 N> void In_Name(WCHAR(&v)[N]) { BindParam(0, v); };
      	template<int32 N> void In_Name(const WCHAR(&v)[N]) { BindParam(0, v); };
      	void In_Name(WCHAR* v, int32 count) { BindParam(0, v, count); };
      	void In_Name(const WCHAR* v, int32 count) { BindParam(0, v, count); };
      	template<int32 N> void In_IpAddress(WCHAR(&v)[N]) { BindParam(1, v); };
      	template<int32 N> void In_IpAddress(const WCHAR(&v)[N]) { BindParam(1, v); };
      	void In_IpAddress(WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_IpAddress(const WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_Port(int32& v) { BindParam(2, v); };
      	void In_Port(int32&& v) { _port = std::move(v); BindParam(2, _port); };
      	void In_BusyScore(int32& v) { BindParam(3, v); };
      	void In_BusyScore(int32&& v) { _busyScore = std::move(v); BindParam(3, _busyScore); };
  
      private:
      	int32 _port = {};
      	int32 _busyScore = {};
      };
  
      class UpdateServerInfo : public DBBind<5,0>
      {
      public:
      	UpdateServerInfo(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spUpdateServerInfo(?,?,?,?,?)}") { }
      	void In_ServerDbId(int32& v) { BindParam(0, v); };
      	void In_ServerDbId(int32&& v) { _serverDbId = std::move(v); BindParam(0, _serverDbId); };
      	template<int32 N> void In_Name(WCHAR(&v)[N]) { BindParam(1, v); };
      	template<int32 N> void In_Name(const WCHAR(&v)[N]) { BindParam(1, v); };
      	void In_Name(WCHAR* v, int32 count) { BindParam(1, v, count); };
      	void In_Name(const WCHAR* v, int32 count) { BindParam(1, v, count); };
      	template<int32 N> void In_IpAddress(WCHAR(&v)[N]) { BindParam(2, v); };
      	template<int32 N> void In_IpAddress(const WCHAR(&v)[N]) { BindParam(2, v); };
      	void In_IpAddress(WCHAR* v, int32 count) { BindParam(2, v, count); };
      	void In_IpAddress(const WCHAR* v, int32 count) { BindParam(2, v, count); };
      	void In_Port(int32& v) { BindParam(3, v); };
      	void In_Port(int32&& v) { _port = std::move(v); BindParam(3, _port); };
      	void In_BusyScore(int32& v) { BindParam(4, v); };
      	void In_BusyScore(int32&& v) { _busyScore = std::move(v); BindParam(4, _busyScore); };
  
      private:
      	int32 _serverDbId = {};
      	int32 _port = {};
      	int32 _busyScore = {};
      };
  
      class SelectServerInfo : public DBBind<1,5>
      {
      public:
      	SelectServerInfo(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectServerInfo(?)}") { }
      	void In_ServerDbId(int32& v) { BindParam(0, v); };
      	void In_ServerDbId(int32&& v) { _serverDbId = std::move(v); BindParam(0, _serverDbId); };
      	void Out_ServerDbId(OUT int32& v) { BindCol(0, v); };
      	template<int32 N> void Out_Name(OUT WCHAR(&v)[N]) { BindCol(1, v); };
      	template<int32 N> void Out_IpAddress(OUT WCHAR(&v)[N]) { BindCol(2, v); };
      	void Out_Port(OUT int32& v) { BindCol(3, v); };
      	void Out_BusyScore(OUT int32& v) { BindCol(4, v); };
  
      private:
      	int32 _serverDbId = {};
      };
  
      class InsertToken : public DBBind<3,0>
      {
      public:
      	InsertToken(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spInsertToken(?,?,?)}") { }
      	void In_AccountDbId(int32& v) { BindParam(0, v); };
      	void In_AccountDbId(int32&& v) { _accountDbId = std::move(v); BindParam(0, _accountDbId); };
      	void In_Token(int32& v) { BindParam(1, v); };
      	void In_Token(int32&& v) { _token = std::move(v); BindParam(1, _token); };
      	void In_Expired(TIMESTAMP_STRUCT& v) { BindParam(2, v); };
      	void In_Expired(TIMESTAMP_STRUCT&& v) { _expired = std::move(v); BindParam(2, _expired); };
  
      private:
      	int32 _accountDbId = {};
      	int32 _token = {};
      	TIMESTAMP_STRUCT _expired = {};
      };
  
      class SelectToken : public DBBind<1,4>
      {
      public:
      	SelectToken(DBConnection& conn) : DBBind(conn, L"{CALL dbo.spSelectToken(?)}") { }
      	void In_TokenDbId(int32& v) { BindParam(0, v); };
      	void In_TokenDbId(int32&& v) { _tokenDbId = std::move(v); BindParam(0, _tokenDbId); };
      	void Out_TokenDbId(OUT int32& v) { BindCol(0, v); };
      	void Out_AccountDbId(OUT int32& v) { BindCol(1, v); };
      	void Out_Token(OUT int32& v) { BindCol(2, v); };
      	void Out_Expired(OUT TIMESTAMP_STRUCT& v) { BindCol(3, v); };
  
      private:
      	int32 _tokenDbId = {};
      };
  
  
       
  };
  C:GenProcedures.h
  1개 파일이 복사되었습니다.
  C:GenSharedDBProcedures.h
  1개 파일이 복사되었습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  DBManager.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(55,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(55,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(61,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(61,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(67,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(67,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(73,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(73,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(79,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(79,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
  GameClientPacketHandler.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
  GameDBManager.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameDBManager.cpp(241,24): warning C4244: '=': 'int64'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameDBManager.cpp(318,23): warning C4244: '=': 'int64'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  GameObject.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.cpp(697,36): warning C4244: '=': 'float'에서 'uint64'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  GameRoom.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(148,8): warning C4244: '초기화 중': 'float'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(149,8): warning C4244: '초기화 중': 'float'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(156,8): warning C4244: '초기화 중': 'float'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(157,8): warning C4244: '초기화 중': 'float'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(179,43): warning C4244: 'return': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(189,25): warning C4244: 'return': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.cpp(789,30): warning C4244: '초기화 중': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  GameSession.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(55,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(55,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(61,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(61,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(67,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(67,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(73,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(73,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(79,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(79,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameSession.cpp(183,54): warning C4267: '인수': 'size_t'에서 'int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameSession.cpp(232,25): warning C4244: '=': 'int64'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  Main.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(55,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(55,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(61,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(61,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(67,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(67,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(73,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(73,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(79,10): warning C4200: 비표준 확장이 사용됨: 구조체/공용 구조체의 배열 크기가 0입니다.
C:\Users\see\source\repos\ServerPF\Library\include\hiredis-master\sds.h(79,10): message : 이 멤버는 기본값으로 설정된 생성자 또는 복사/이동 대입 연산자에서 무시됩니다.
  QuestManager.cpp
C:\Users\see\source\repos\ServerPF\ServerPF\GameObject.h(1,1): warning C4828: 파일에 0xcd7 오프셋에서 시작하는 문자가 포함되어 있습니다. 이 문자는 현재 원본 문자 집합에서 잘못된 문자입니다(코드 페이지 949).
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(89,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(90,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\see\source\repos\ServerPF\ServerPF\GameRoom.h(91,23): warning C4244: '인수': 'double'에서 'float'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  SharedDBManager.cpp
  코드를 생성하고 있습니다.
  Previous IPDB and IOBJ mismatch, fall back to full compilation.
  All 10471 functions were compiled because no usable IPDB/IOBJ from previous compilation was found.
  코드를 생성했습니다.
  ServerPF.vcxproj -> C:\Users\see\source\repos\ServerPF\x64\Release\ServerPF.exe
